name: Update Project Metrics

on:
    push:
        branches: [main]
    schedule:
        # Update metrics weekly on Monday at 9 AM UTC
        - cron: "0 9 * * 1"
    workflow_dispatch:

jobs:
    update-metrics:
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e .
                  pip install -r requirements.txt
                  pip install coverage pytest cloc

            - name: Generate Code Metrics
              run: |
                  echo "# 📊 Automated Project Metrics Report" > PROJECT_STATS.md
                  echo "Generated on: $(date)" >> PROJECT_STATS.md
                  echo "" >> PROJECT_STATS.md

                  echo "## 📈 Code Statistics" >> PROJECT_STATS.md
                  echo "\`\`\`" >> PROJECT_STATS.md
                  cloc --exclude-dir=.git,.pytest_cache,__pycache__ . >> PROJECT_STATS.md 2>/dev/null || echo "Code counting tool not available"
                  echo "\`\`\`" >> PROJECT_STATS.md
                  echo "" >> PROJECT_STATS.md

                  echo "## 🧪 Test Coverage Report" >> PROJECT_STATS.md
                  echo "\`\`\`" >> PROJECT_STATS.md
                  python -m pytest --cov=budget_manager --cov-report=term-missing tests/ >> PROJECT_STATS.md 2>&1 || echo "Test coverage report failed"
                  echo "\`\`\`" >> PROJECT_STATS.md
                  echo "" >> PROJECT_STATS.md

                  echo "## 📦 Package Information" >> PROJECT_STATS.md
                  echo "- **Python Version**: $(python --version)" >> PROJECT_STATS.md
                  echo "- **Package Version**: $(grep version setup.py | head -1 | cut -d'\"' -f2)" >> PROJECT_STATS.md
                  echo "- **Dependencies**: $(grep -c "^[^#]" requirements.txt) packages" >> PROJECT_STATS.md
                  echo "- **Test Files**: $(find tests/ -name "*.py" | wc -l) files" >> PROJECT_STATS.md
                  echo "- **Source Files**: $(find src/ -name "*.py" | wc -l) files" >> PROJECT_STATS.md
                  echo "" >> PROJECT_STATS.md

                  echo "## 🏗️ Project Structure" >> PROJECT_STATS.md
                  echo "\`\`\`" >> PROJECT_STATS.md
                  tree -I '__pycache__|*.pyc|.git|.pytest_cache|*.egg-info' --dirsfirst -L 3 >> PROJECT_STATS.md 2>/dev/null || echo "Project structure not available"
                  echo "\`\`\`" >> PROJECT_STATS.md

            - name: Generate GitHub Metrics Badge Data
              run: |
                  # Create JSON file with metrics for badge generation
                  cat > metrics.json << EOF
                  {
                    "schemaVersion": 1,
                    "label": "tests",
                    "message": "$(python -m pytest tests/ --tb=no -q | tail -1 | grep -o '[0-9]* passed' | head -1 || echo '0 passed')",
                    "color": "green"
                  }
                  EOF

                  # Create coverage badge data
                  COVERAGE=$(python -m pytest --cov=budget_manager --cov-report=term-missing tests/ 2>/dev/null | grep TOTAL | awk '{print $4}' | sed 's/%//' || echo "0")
                  cat > coverage.json << EOF
                  {
                    "schemaVersion": 1,
                    "label": "coverage",
                    "message": "${COVERAGE}%",
                    "color": "$([ $COVERAGE -gt 90 ] && echo 'brightgreen' || [ $COVERAGE -gt 75 ] && echo 'yellow' || echo 'red')"
                  }
                  EOF

            - name: Update Repository Statistics
              run: |
                  echo "## 📊 Repository Statistics" >> PROJECT_STATS.md
                  echo "- **Total Commits**: $(git rev-list --all --count)" >> PROJECT_STATS.md
                  echo "- **Contributors**: $(git log --format='%aN' | sort | uniq | wc -l)" >> PROJECT_STATS.md
                  echo "- **Branches**: $(git branch -r | wc -l)" >> PROJECT_STATS.md
                  echo "- **Last Updated**: $(git log -1 --format='%cd' --date=short)" >> PROJECT_STATS.md
                  echo "- **Repository Size**: $(du -sh . | cut -f1)" >> PROJECT_STATS.md

            - name: Commit updated metrics
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add PROJECT_STATS.md metrics.json coverage.json
                  git diff --staged --quiet || git commit -m "📊 Auto-update project metrics and statistics"
                  git push || echo "No changes to push"
